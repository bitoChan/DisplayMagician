<!--Code from https://weblogs.sqlteam.com/mladenp/2010/02/11/wix-3-tutorial-solutionproject-structure-and-dev-resources/ -->
<!-- Add xmlns:util namespace definition to be able to use stuff from WixUtilExtension dll-->
<Wix xmlns="http://wixtoolset.org/schemas/v4/wxs" xmlns:util="http://wixtoolset.org/schemas/v4/wxs/util" xmlns:ui="http://wixtoolset.org/schemas/v4/wxs/ui">
	<!-- This is how we include wxi files -->
	<?include $(sys.CURRENTDIR)Includes\DisplayMagicianVariables.wxi ?>
	<!-- 
  Id="*" is to enable upgrading. * means that the product ID will be autogenerated on each build. 
  Name is made of localized product name and version number.
  -->
	<Package Name="!(loc.ProductName)" Language="!(loc.LANG)" Version="!(bind.fileVersion.DisplayMagicianExe)" Manufacturer="!(loc.ManufacturerName)" UpgradeCode="$(var.UpgradeCode)" InstallerVersion="314"><!-- Define the minimum supported installer version (3.0) and that the install should be done for the whole machine not just the current user -->
		
		<Media Id="1" Cabinet="media1.cab" EmbedCab="yes" />
		<!-- Upgrade settings. This will be explained in more detail in a future post -->
		<Upgrade Id="$(var.UpgradeCode)">
			<UpgradeVersion OnlyDetect="yes" Minimum="!(bind.fileVersion.DisplayMagicianExe)" IncludeMinimum="no" Property="NEWERFOUND" />
			<!--<UpgradeVersion OnlyDetect="yes" Minimum="!(bind.fileVersion.DisplayMagicianExe)" Maximum="!(bind.fileVersion.DisplayMagicianExe)" IncludeMinimum="yes" IncludeMaximum="yes" Property="SELFFOUND" />-->
			<UpgradeVersion Minimum="0.0.0.0" IncludeMinimum="no" Maximum="!(bind.fileVersion.DisplayMagicianExe)" IncludeMaximum="yes" Property="OLDER_VERSION_FOUND" IgnoreRemoveFailure="yes" />
		</Upgrade>

		<CustomAction Id="AlreadyUpdated" Error="!(loc.ProductName) has already been updated to !(bind.fileVersion.DisplayMagicianExe) or newer. If you want to reinstall this version then uninstall !(loc.ProductName) first." />
		<CustomAction Id="NoDowngrade" Error="A later version of [ProductName] is already installed." />

		<!--<Condition Message="A newer version of [ProductName] is already installed.">
			NEWER_FOUND
		</Condition>
		<Condition Message="You are trying to upgrade to the same version of [ProductName].">
			SELF_FOUND
		</Condition>-->
		<!--<MajorUpgrade IgnoreRemoveFailure="yes" AllowDowngrades="no" AllowSameVersionUpgrades="no"  DowngradeErrorMessage="!(loc.DowngradeErrorMessage)" />-->
		<!-- Reference the global WIXNETFX4RELEASEINSTALLED property so that will automatically pull in the .Net 4.8 variables (WiX 3.14 and higher only supported) -->
		<!-- <PropertyRef Id="WIX_IS_NETFRAMEWORK_48_OR_LATER_INSTALLED"/>
		<Condition Message="!(loc.DotNetFrameworkNeeded)">
			<![CDATA[Installed OR WIX_IS_NETFRAMEWORK_48_OR_LATER_INSTALLED]]>
		</Condition>-->
		<!-- Load the  -->
		<PropertyRef Id="WIXNETFX4RELEASEINSTALLED" />
		<Launch Condition="Installed OR (WIXNETFX4RELEASEINSTALLED &gt;= &quot;#528040&quot;)" Message="!(loc.DotNetFrameworkNeeded)" />

		<Property Id="MSIRESTARTMANAGERCONTROL" Value="0" />
		<Property Id="MSIRMSHUTDOWN" Value="1" />
		<Property Id="MSIDISABLERMRESTART" Value="0" />

		<!-- <util:RestartResource Id="RestartExplorer"
                              Path="[EXPLORERPATH]"
                              ProcessName="explorer.exe"/>

		<Property Id="EXPLORERPATH" >
			<DirectorySearch Id="FindExplorerDir"
                             AssignToProperty="no"
                             Depth="0"
                             Path="[WindowsFolder]">
				<FileSearch Id="FindExplorer"
                            Name="explorer.exe" />
			</DirectorySearch>
		</Property> -->

		<!-- 
    Startup conditions that checks if .Net Framework 4.8 is installed or if 
    we're running Windows 8.1 or higher as the OS.
    If not the installation is aborted.
    By doing the (Installed OR ...) property means that this condition will only 
    be evaluated if the app is being installed and not on uninstall or changing
    -->
		<Launch Condition="Installed OR (VersionNT64 &gt;= 603)" Message="!(loc.AppNotSupported)" />
		<!-- This will ask the user to close the DisplayMagician app if it's running while upgrading -->
		<util:CloseApplication Id="CloseDisplayMagician" CloseMessage="no" Description="!(loc.MustCloseDisplayMagician)" ElevatedCloseMessage="no" RebootPrompt="no" Target="$(var.ExeName)" />
		<!-- Use the built in WixUI_InstallDir GUI -->
		<ui:WixUI Id="WixUI_InstallDir" />

		<UI>			
			<!-- Add in some text styles to make the text white -->
			<TextStyle Id="White_Normal" FaceName="Tahoma" Size="8" Red="255" Green="255" Blue="255" />
			<TextStyle Id="White_Bigger" FaceName="Tahoma" Size="12" Red="255" Green="255" Blue="255" />
			<TextStyle Id="White_Title" FaceName="Tahoma" Size="9" Bold="yes" Red="255" Green="255" Blue="255" />

			<!-- These dialog references are needed for CloseApplication above to work correctly -->
			<DialogRef Id="FilesInUse" />
			<DialogRef Id="MsiRMFilesInUse" />
			
			<!-- Here we'll add the GUI logic for installation and updating in a future post-->
			<Publish Dialog="WelcomeDlg" Control="Next" Event="NewDialog" Value="LicenseAgreementDialogOverwritten" />
			<Publish Dialog="LicenseAgreementDialogOverwritten" Control="Back" Event="NewDialog" Value="WelcomeDlg" />
			<!--<Publish Dialog="LicenseAgreementDialogOverwritten" Control="Next" Event="NewDialog" Value="InstallDirDlg">LicenseAcceptedOverwritten = "1" AND NOT OLDER_VERSION_FOUND</Publish>-->
			<Publish Dialog="LicenseAgreementDialogOverwritten" Control="Next" Event="NewDialog" Value="InstallDirDlg" Condition="LicenseAcceptedOverwritten = &quot;1&quot;" />
			<Publish Dialog="InstallDirDlg" Control="Back" Event="NewDialog" Value="LicenseAgreementDialogOverwritten" />
			<!--<Publish Dialog="ExitDialog" Control="Finish" Event="DoAction" Value="LaunchApplication">WIXUI_EXITDIALOGOPTIONALCHECKBOX = 1 and NOT Installed</Publish>-->
		</UI>
		<!-- Set the icon to show next to the program name in Add/Remove programs -->
		<Icon Id="DisplayMagicianIcon.ico" SourceFile="$(var.ResourcesDir)\DisplayMagician.ico" />
		<Property Id="ARPPRODUCTICON" Value="DisplayMagicianIcon.ico" />
		<!-- Installer UI custom pictures. File names are made up. Add path to your pics -->
		<WixVariable Id="WixUIBannerBmp" Value="Resources\WixUIBannerBmpDark.png" />
		<WixVariable Id="WixUIDialogBmp" Value="Resources\WixUIDialogBmp.png" />
		<WixVariable Id="WixUILicenseRtf" Value="Lang\en-us\EULA_en-us.rtf" />

		<!-- the default directory structure -->
		

		<!-- Now we create an Application shortcut -->
		<DirectoryRef Id="ApplicationProgramsFolder">
			<Component Id="ApplicationShortcut" Guid="6C7BFB9E-8549-4E34-BE44-E1A718146755">
				<Shortcut Id="ApplicationStartMenuShortcut" Name="!(loc.ProductName)" Description="!(loc.ProductDescription)" Target="[APPLICATIONROOTDIRECTORY]$(var.DisplayMagician.TargetFileName)" WorkingDirectory="APPLICATIONROOTDIRECTORY" Icon="DisplayMagicianIcon.ico">
					<!--AUMID-->
					<ShortcutProperty Key="System.AppUserModel.ID" Value="LittleBitBig.DisplayMagician" />
					<!--COM CLSID-->
					<ShortcutProperty Key="System.AppUserModel.ToastActivatorCLSID" Value="{56F14154-6339-4B94-8B82-80F78D5BCEAF}" />
				</Shortcut>
				<RemoveFolder Id="CleanUpApplicationShortCut" Directory="ApplicationProgramsFolder" On="uninstall" />
				<RemoveFolder Id="CleanUpAppUserModelId" Directory="ApplicationProgramsFolder" On="uninstall" />
				<RegistryValue Root="HKCU" Key="Software\DisplayMagician" Name="DisplayMagicianInstalled" Type="integer" Value="1" KeyPath="yes" />
			</Component>		
		</DirectoryRef>


		<!-- Set the default install location to the value of APPLICATIONROOTDIRECTORY (usually c:\Program Files\YourProductName) -->
		<Property Id="WIXUI_INSTALLDIR" Value="APPLICATIONROOTDIRECTORY" />
		
		<!-- Set the last page to show a Launch DisplayMagician checkbox -->
		<!--<Property Id="WixShellExecTarget" Value="[APPLICATIONROOTDIRECTORY]$(var.DisplayMagician.TargetFileName)" />
		<Property Id="WIXUI_EXITDIALOGOPTIONALCHECKBOXTEXT" Value="Launch !(loc.ProductName)" />
		<CustomAction Id="LaunchApplication" BinaryKey="WixCA" DllEntry="WixShellExec" Impersonate="yes" />-->

		<!-- Preapre custom actions to register and unregisterthe ShellExtension DLL -->
		<CustomAction Id="InstallShell" ExeCommand="install &quot;[APPLICATIONROOTDIRECTORY]\DisplayMagicianShellExtensionOld.dll&quot; -os64 -codebase" Execute="deferred" Return="check" Impersonate="no" FileRef="ServerRegistrationManager.exe" />
		<CustomAction Id="UninstallShell" ExeCommand="uninstall &quot;[APPLICATIONROOTDIRECTORY]\DisplayMagicianShellExtensionOld.dll&quot;" Execute="deferred" Return="check" Impersonate="no" FileRef="ServerRegistrationManager.exe" /> 
		
		<!-- Plumb the registering and unregistering of the ShellExtension DLL into the instllation sequence -->
		<InstallExecuteSequence>
			<RemoveExistingProducts After="InstallValidate" />
			<ScheduleReboot After="InstallFinalize" Condition="NOT Installed" />
			<Custom Action="InstallShell" After="InstallFiles" Condition="NOT Installed" />
			<Custom Action="UninstallShell" Before="RemoveFiles" Condition="(NOT UPGRADINGPRODUCTCODE) AND (REMOVE=&quot;ALL&quot;)" />			
			<Custom Action="AlreadyUpdated" After="FindRelatedProducts" Condition="SELFFOUND" />
			<Custom Action="NoDowngrade" After="FindRelatedProducts" Condition="NEWERFOUND" />
		</InstallExecuteSequence>

		<!-- Set the components defined in our fragment files that will be used for our feature  -->
		<Feature Id="DisplayMagicianFeature" Title="!(loc.ProductName)" Level="1">
			<ComponentGroupRef Id="DisplayMagicianFiles" />
			<ComponentRef Id="ApplicationShortcut" />
			<ComponentRef Id="HKLMRegistryEntries" />
			<ComponentRef Id="HKCURegistryEntries" />

			<!-- Add in the 3 ShellExtension files we need to make the COM registration work -->
			<Component Directory="APPLICATIONROOTDIRECTORY">
				<File Id="DisplayMagicianShellExtensionOld.dll" Source="$(var.DisplayMagicianShellExtensionOld.TargetDir)\DisplayMagicianShellExtensionOld.dll" KeyPath="yes" />
			</Component>
			<Component Directory="APPLICATIONROOTDIRECTORY">
				<File Id="ServerRegistrationManager.exe" Source="$(var.DisplayMagicianShellExtensionOld.TargetDir)\ServerRegistrationManager.exe" KeyPath="yes" />
			</Component>
			<Component Directory="APPLICATIONROOTDIRECTORY">
				<File Id="SharpShell.dll" Source="$(var.DisplayMagicianShellExtensionOld.TargetDir)\SharpShell.dll" KeyPath="yes" />
			</Component>
		</Feature>
	
			<!-- Create a 64-bit Programs Folder for the Application-->
			<StandardDirectory Id="ProgramFiles64Folder">
				<Directory Id="APPLICATIONROOTDIRECTORY" Name="!(loc.ProductName)" />
			</StandardDirectory>
			<!-- Create a Start Menu Folder for the Application-->
			<StandardDirectory Id="ProgramMenuFolder">
				<Directory Id="ApplicationProgramsFolder" Name="!(loc.ProductName)" />
			</StandardDirectory>
			<Component Id="HKLMRegistryEntries" Guid="4AB42CB7-3E2A-465B-9BE2-DDDE7D34797B" Directory="TARGETDIR">
				<RegistryValue Root="HKLM" Key="Software\DisplayMagician" Type="string" Name="InstallDir" Value="[APPLICATIONROOTDIRECTORY]" KeyPath="yes" />
				<RemoveRegistryKey Root="HKLM" Key="Software\DisplayMagician" Action="removeOnUninstall" />
			</Component>
			<Component Id="HKCURegistryEntries" Guid="481CA633-0BC0-49CD-B673-51BE9560B00F" Directory="TARGETDIR">
				<RegistryValue Root="HKCU" Key="Software\DisplayMagician" Type="string" Name="AppDataDir" Value="[LocalAppDataFolder]" KeyPath="yes" />
				<RemoveRegistryKey Root="HKCU" Key="Software\DisplayMagician" Action="removeOnUninstall" />
			</Component>
		</Package>
</Wix>